{"version":3,"sources":["../../../src/index.ts","../../../../src/api/deposit.ts","../../../src/terra.ts","../../../../src/api/height.ts","../../../../src/api/terraDev.ts"],"names":["TerraNetwork"],"mappings":"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","file":"static/js/5.0a2e66dd.chunk.js","sourcesContent":["export * from \"./terra\";\n//# sourceMappingURL=index.js.map","export var TerraNetwork;\n(function (TerraNetwork) {\n    TerraNetwork[\"Tequila\"] = \"tequila-0004\";\n    TerraNetwork[\"Columbus\"] = \"columbus-4\";\n})(TerraNetwork || (TerraNetwork = {}));\nexport const UNSUPPORTED_TERRA_NETWORK = `Terra is not supported by the current RenVM network.`;\nexport const transactionToDeposit = (transaction) => ({\n    transaction,\n    amount: transaction.amount,\n});\n//# sourceMappingURL=deposit.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport bech32 from \"bech32\";\nimport { getRenNetworkDetails, } from \"@renproject/interfaces\";\nimport { assertType, Callable, isHex, utilsWithChainNetwork, } from \"@renproject/utils\";\nimport { AccAddress, Key } from \"@terra-money/terra.js\";\nimport elliptic from \"elliptic\";\nimport { TerraNetwork, transactionToDeposit, UNSUPPORTED_TERRA_NETWORK, } from \"./api/deposit\";\nimport { terraDev } from \"./api/terraDev\";\nconst resolveTerraNetwork = (network) => {\n    if (network === TerraNetwork.Columbus || network === TerraNetwork.Tequila) {\n        return network;\n    }\n    const renNetwork = getRenNetworkDetails(network);\n    // Prioritize the network passed in to the constructor.\n    return renNetwork.isTestnet ? TerraNetwork.Tequila : TerraNetwork.Columbus;\n};\nexport var TerraAssets;\n(function (TerraAssets) {\n    TerraAssets[\"LUNA\"] = \"LUNA\";\n})(TerraAssets || (TerraAssets = {}));\n/**\n * TerraClass implements the LockChain interface for Terra (https://terra.money)\n * and it's asset LUNA.\n */\nexport class TerraClass {\n    constructor(network) {\n        this.chain = TerraClass.chain;\n        this.name = TerraClass.chain;\n        // The assets native to Terra.\n        this.assets = [TerraAssets.LUNA];\n        this.utils = utilsWithChainNetwork(TerraClass.utils, () => this.chainNetwork);\n        /**\n         * See [[LockChain.initialize]].\n         */\n        this.initialize = (renNetwork) => {\n            this.renNetwork = getRenNetworkDetails(renNetwork);\n            // Prioritize the network passed in to the constructor.\n            this.chainNetwork =\n                this.chainNetwork || this.renNetwork.isTestnet\n                    ? TerraNetwork.Tequila\n                    : TerraNetwork.Columbus;\n            return this;\n        };\n        /**\n         * See [[LockChain.assetIsNative]].\n         */\n        this.assetIsNative = (asset) => this.assets.indexOf(asset) >= 0;\n        this.assetIsSupported = this.assetIsNative;\n        this.assertAssetIsSupported = (asset) => {\n            if (!this.assetIsNative(asset)) {\n                throw new Error(`Unsupported asset ${asset}.`);\n            }\n        };\n        /**\n         * See [[LockChain.assetDecimals]].\n         */\n        this.assetDecimals = (asset) => {\n            switch (asset) {\n                case TerraAssets.LUNA:\n                    return 6;\n            }\n            throw new Error(`Unsupported asset ${String(asset)}.`);\n        };\n        /**\n         * See [[LockChain.getDeposits]].\n         */\n        this.getDeposits = (asset, address, _instanceID, onDeposit) => __awaiter(this, void 0, void 0, function* () {\n            if (!this.chainNetwork) {\n                throw new Error(`${this.name} object not initialized.`);\n            }\n            this.assertAssetIsSupported(asset);\n            const txs = yield terraDev.fetchDeposits(address.address, this.chainNetwork);\n            yield Promise.all(txs.map((tx) => __awaiter(this, void 0, void 0, function* () { return onDeposit(transactionToDeposit(tx)); })));\n        });\n        /**\n         * See [[LockChain.transactionConfidence]].\n         */\n        this.transactionConfidence = (transaction) => __awaiter(this, void 0, void 0, function* () {\n            if (!this.chainNetwork) {\n                throw new Error(`${this.name} object not initialized.`);\n            }\n            transaction = yield terraDev.fetchDeposit(transaction.hash, transaction.messageIndex, this.chainNetwork);\n            return {\n                current: transaction.confirmations,\n                target: this.chainNetwork === TerraNetwork.Columbus ? 0 : 0,\n            };\n        });\n        /**\n         * See [[LockChain.getGatewayAddress]].\n         */\n        this.getGatewayAddress = (asset, compressedPublicKey, gHash) => {\n            if (!this.renNetwork) {\n                throw new Error(`${this.name} object not initialized.`);\n            }\n            this.assertAssetIsSupported(asset);\n            const ec = new elliptic.ec(\"secp256k1\");\n            // Decode compressed RenVM public key.\n            const renVMPublicKey = ec.keyFromPublic(compressedPublicKey);\n            // Interpret gHash as a private key.\n            const gHashKey = ec.keyFromPrivate(gHash);\n            // If `NO_PARAMS_FLAG` is set, set renVM public key and gHash public key,\n            // and recreate key pair from resulting curve point.\n            const derivedPublicKey = ec.keyFromPublic(renVMPublicKey\n                .getPublic()\n                .add(gHashKey.getPublic()));\n            const newCompressedPublicKey = Buffer.from(derivedPublicKey.getPublic().encodeCompressed());\n            // @ts-expect-error `Cannot create an instance of an abstract class`\n            const address = new Key(newCompressedPublicKey);\n            return {\n                asset,\n                address: address.accAddress,\n            };\n        };\n        /**\n         * See [[LockChain.addressToBytes]].\n         */\n        this.addressToBytes = (address) => Buffer.from(bech32.fromWords(bech32.decode(typeof address === \"string\" ? address : address.address).words));\n        /**\n         * See [[LockChain.bytesToAddress]].\n         */\n        this.bytesToAddress = (address) => {\n            const words = bech32.toWords(address);\n            return bech32.encode(\"terra\", words);\n        };\n        /** @deprecated. Renamed to addressToBytes. */\n        this.addressStringToBytes = this.addressToBytes;\n        this.addressToString = (address) => typeof address === \"string\" ? address : address.address;\n        /**\n         * See [[LockChain.transactionID]].\n         */\n        this.transactionID = (transaction) => transaction.hash;\n        this.transactionIDFromRPCFormat = (txid, _txindex) => typeof txid === \"string\" ? txid : txid.toString(\"hex\");\n        this.transactionFromRPCFormat = (txid, txindex) => __awaiter(this, void 0, void 0, function* () {\n            if (!this.chainNetwork) {\n                throw new Error(`${this.name} object not initialized.`);\n            }\n            return terraDev.fetchDeposit(typeof txid === \"string\" ? txid : txid.toString(\"hex\"), parseInt(txindex, 10), this.chainNetwork);\n        });\n        /**\n         * @deprecated Renamed to `transactionFromRPCFormat`.\n         * Will be removed in 3.0.0.\n         */\n        this.transactionFromID = this.transactionFromRPCFormat;\n        this.depositV1HashString = (_deposit) => {\n            throw new Error(UNSUPPORTED_TERRA_NETWORK);\n        };\n        this.transactionRPCFormat = (transaction, v2) => {\n            if (!v2) {\n                throw new Error(UNSUPPORTED_TERRA_NETWORK);\n            }\n            return {\n                txid: Buffer.from(transaction.hash, \"hex\"),\n                txindex: \"0\",\n            };\n        };\n        this.transactionRPCTxidFromID = (transactionID) => Buffer.from(transactionID, \"hex\");\n        this.Address = (address) => {\n            // Type validation\n            assertType(\"string\", { address });\n            this.getBurnPayload = (bytes) => bytes ? this.addressToBytes(address).toString(\"hex\") : address;\n            return this;\n        };\n        this.burnPayload = (config) => {\n            return this.getBurnPayload\n                ? this.getBurnPayload(config && config.bytes)\n                : undefined;\n        };\n        this.chainNetwork = network;\n    }\n}\nTerraClass.chain = \"Terra\";\nTerraClass.utils = {\n    resolveChainNetwork: resolveTerraNetwork,\n    addressIsValid: (addressIn, _network = TerraNetwork.Columbus) => {\n        const address = typeof addressIn === \"string\" ? addressIn : addressIn.address;\n        assertType(\"string\", { address: address });\n        return AccAddress.validate(address);\n    },\n    transactionIsValid: (transaction, _network = TerraNetwork.Columbus) => {\n        return isHex(typeof transaction === \"string\"\n            ? transaction\n            : transaction.hash, { length: 32 });\n    },\n    addressExplorerLink: (addressIn, network = TerraNetwork.Columbus) => {\n        return `https://finder.terra.money/${Terra.utils.resolveChainNetwork(network)}/account/${typeof addressIn === \"string\" ? addressIn : addressIn.address}`;\n    },\n    transactionExplorerLink: (transaction, network = TerraNetwork.Columbus) => {\n        return `https://finder.terra.money/${Terra.utils.resolveChainNetwork(network)}/tx/${typeof transaction === \"string\" ? transaction : transaction.hash}`;\n    },\n};\n// @dev Removes any static fields, except `utils`.\nexport const Terra = Callable(TerraClass);\nconst _ = Terra;\n//# sourceMappingURL=terra.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { LCDClient } from \"@terra-money/terra.js\";\nimport { TerraNetwork } from \"./deposit\";\n// Cache clients\nconst clients = {};\nexport const getHeight = (network) => __awaiter(void 0, void 0, void 0, function* () {\n    // connect to testnet\n    let prefix;\n    switch (network) {\n        case TerraNetwork.Columbus:\n            prefix = \"lcd\";\n            break;\n        case TerraNetwork.Tequila:\n            prefix = \"tequila-lcd\";\n            break;\n        default:\n            throw new Error(`Terra network ${String(network)} not supported.`);\n    }\n    const terra = clients[network] ||\n        new LCDClient({\n            URL: `https://${String(prefix)}.terra.dev`,\n            chainID: network,\n        });\n    clients[network] = terra;\n    const result = yield terra.tendermint.blockInfo();\n    return parseInt(result.block.header.height, 10);\n});\n//# sourceMappingURL=height.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { SECONDS } from \"@renproject/utils\";\nimport Axios from \"axios\";\nimport { TerraNetwork } from \"./deposit\";\nimport { getHeight } from \"./height\";\nconst TERRA_DEV_URL = (network) => {\n    let prefix;\n    switch (network) {\n        case TerraNetwork.Columbus:\n            prefix = \"fcd\";\n            break;\n        case TerraNetwork.Tequila:\n            prefix = \"tequila-fcd\";\n            break;\n        default:\n            throw new Error(`Terra network ${String(network)} not supported.`);\n    }\n    return `https://${String(prefix)}.terra.dev/v1`;\n};\nconst extractDepositsFromTx = (chainHeight) => (tx) => {\n    const msgs = [];\n    try {\n        const decodedMsgs = tx.tx.value.msg;\n        for (let i = 0; i < decodedMsgs.length; i++) {\n            const msg = decodedMsgs[i];\n            if (msg.type === \"bank/MsgSend\") {\n                for (const amount of msg.value.amount) {\n                    msgs.push(Object.assign(Object.assign(Object.assign({}, tx), { messageIndex: i, to_address: msg.value.to_address, from_address: msg.value.from_address }), amount));\n                }\n            }\n        }\n    }\n    catch (_error) {\n        return [];\n    }\n    return msgs.map((msg) => {\n        return {\n            hash: msg.txhash,\n            messageIndex: msg.messageIndex,\n            from: msg.from_address,\n            to: msg.to_address,\n            denomination: msg.denom,\n            amount: msg.amount,\n            memo: msg.tx.value.memo,\n            confirmations: msg.height\n                ? chainHeight - parseInt(msg.height, 10)\n                : msg.height,\n        };\n    });\n};\nconst concat = (x, y) => x.concat(y);\nconst fetchDeposits = (address, network, memo = undefined) => __awaiter(void 0, void 0, void 0, function* () {\n    // const paramsFilterBase64 = paramsFilter && paramsFilter.toString(\"base64\");\n    // const url = `${TERRA_DEV_URL(network)}/txs?account=${address}&page=${\n    //     page + 1\n    // }&chainId=${network}`;\n    const url = `${TERRA_DEV_URL(network)}/txs?account=${address}&chainId=${network}`;\n    const response = (yield Axios.get(url, {\n        timeout: 60 * SECONDS,\n    })).data;\n    const { txs } = response;\n    const filteredTxs = !memo\n        ? txs\n        : txs.filter((message) => message.tx &&\n            message.tx.value &&\n            message.tx.value.memo === memo);\n    // Create an entry for each message. Transactions can contain multiple\n    // messages.\n    // Fetch current height of the chain. Skip if no messages were found.\n    const chainHeight = filteredTxs.length > 0 ? yield getHeight(network) : 0;\n    return filteredTxs\n        .map(extractDepositsFromTx(chainHeight))\n        .reduce(concat, [])\n        .filter((msg) => msg.to === address);\n});\nconst fetchDeposit = (hash, messageIndex, network) => __awaiter(void 0, void 0, void 0, function* () {\n    // const paramsFilterBase64 = paramsFilter && paramsFilter.toString(\"base64\");\n    const url = `${TERRA_DEV_URL(network)}/tx/${hash}`;\n    const tx = (yield Axios.get(url, {\n        timeout: 60 * SECONDS,\n    })).data;\n    if (tx === null) {\n        throw new Error(`Unable to find Terra transaction ${hash}.`);\n    }\n    // Create an entry for each message. Transactions can contain multiple\n    // messages.\n    // Fetch current height of the chain. Skip if no messages were found.\n    const chainHeight = yield getHeight(network);\n    return extractDepositsFromTx(chainHeight)(tx)[messageIndex];\n});\nexport const terraDev = {\n    fetchDeposits,\n    fetchDeposit,\n};\n//# sourceMappingURL=terraDev.js.map"],"sourceRoot":""}